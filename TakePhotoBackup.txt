import {StatusBar} from 'expo-status-bar'
import React, { useEffect } from 'react';
import {StyleSheet, Text, View, TouchableOpacity, Alert, ImageBackground, Image} from 'react-native'
import {Camera, CameraCapturedPicture, CameraType} from 'expo-camera'
import authenticateFace from "./AuthenticationService"
import * as FaceDetector from 'expo-face-detector';

let camera: Camera;

export const TakePhoto: React.FC<TakePhotoProps> = (props) => {
  const [startCamera, setStartCamera] = React.useState(false)
  const [authentication, setAuthentication] = React.useState<boolean|null>(null)
  const [previewVisible, setPreviewVisible] = React.useState(false)
  const [capturedImage, setCapturedImage] = React.useState<CameraCapturedPicture|null>(null)
  const [cameraType, setCameraType] = React.useState(CameraType.front)

  useEffect(() => {
    if (authentication) {
      props.onValidationSuccess();
    }
  }, [authentication]);

  const __startCamera = async () => {
    setAuthentication(null);
    const {status} = await Camera.requestCameraPermissionsAsync();    
    if (status === 'granted') {
      setStartCamera(true)
    } else {
        Alert.alert('Access denied')
    }
  }

  const __takePicture = async () => {
    const photo:CameraCapturedPicture = await camera.takePictureAsync()
    setPreviewVisible(true)
    //setStartCamera(false)
    setCapturedImage(photo)
  }
  const __retakePicture = () => {
    setCapturedImage(null)
    setPreviewVisible(false)
    __startCamera()
  }
  
  const __switchCamera = () => {
    setCameraType(cameraType === 'back' ? CameraType.front : CameraType.back)
  }

  const __authenticatePhoto = () => {
    const result:boolean = authenticateFace(capturedImage, props.data);
    setAuthentication(result);
    if (authentication) {
        setStartCamera(false);
        setPreviewVisible(false);
    }
    setCapturedImage(null)
    return authentication;
  }
  return (
    <View style={styles.container}>
      {(startCamera && authentication === null) ? (
        <View style={{flex: 1,width: '100%'}}>
          {previewVisible && capturedImage ? (
            <CameraPreview photo={capturedImage} authenticatePhoto={__authenticatePhoto} retakePicture={__retakePicture} />
          ) : (
            <Camera type={cameraType} style={{flex: 1}} ref={(r:Camera) => { camera = r }}
            faceDetectorSettings={{mode: FaceDetector.FaceDetectorMode.fast, detectLandmarks: FaceDetector.FaceDetectorLandmarks.all,
              runClassifications: FaceDetector.FaceDetectorClassifications.all, minDetectionInterval: 100, tracking: true}}>
              <View style={{flex: 1, width: '100%', backgroundColor: 'transparent', flexDirection: 'row'}}>
                <View style={{position: 'absolute', left: '5%', top: '10%', flexDirection: 'column', justifyContent: 'space-between'}}>
                  <TouchableOpacity onPress={__switchCamera}>
                    <Text style={{fontSize: 20,color: '#fff', fontWeight:'bold'}}>Switch Camera</Text>
                  </TouchableOpacity>
                </View>
                <View style={{position: 'absolute', bottom: 0,flexDirection: 'row',flex: 1,width: '100%',padding: 20,justifyContent: 'space-between'}}>
                  <View style={{alignSelf: 'center', flex: 1,alignItems: 'center'}}>
                    <TouchableOpacity onPress={__takePicture} style={{width: 70,height: 70,bottom: 0,borderRadius: 50,
                     backgroundColor: '#fff'}}/>
                  </View>
                </View>
              </View>
            </Camera>
          )}
        </View>
      ) 
      : 
      (
        <View style={{flex: 1,backgroundColor: '#fff', justifyContent: 'center', alignItems: 'center'}}>
            {authentication ?
            (<Text style={{color: '#fff', fontWeight: 'bold', textAlign: 'center', width: 130, borderRadius: 4, backgroundColor: '#14274e',
            flexDirection: 'row', justifyContent: 'center', alignItems: 'center', height: 40}}>Authentication Successful</Text>) 
        : 
        (
        <TouchableOpacity onPress={__startCamera} style={{width: 130, borderRadius: 4, backgroundColor: '#14274e',
            flexDirection: 'row', justifyContent: 'center', alignItems: 'center', height: 40}}>
        <Text style={{color: '#fff', fontWeight: 'bold', textAlign: 'center'}}>{authentication === null ? 'Take picture' : 'Authentication Failed, Try again'}</Text>
        </TouchableOpacity>
    )}
          
        </View>
      )}
      <StatusBar style="auto" />
    </View>
  )
}

const CameraPreview = ({photo, retakePicture, authenticatePhoto}: any) => {
  return (
    <View style={{backgroundColor: 'transparent', flex: 1, width: '100%', height: '100%'}}>
      <ImageBackground source={{uri: photo && photo.uri}} style={{flex: 1}}>
        <View style={styles.imgBackground}>
          <View style={{flexDirection: 'row',justifyContent: 'space-between' }}>
            <TouchableOpacity onPress={retakePicture} style={{width: 130,height: 40,alignItems: 'center',borderRadius: 4}}>
              <Text style={{ color: '#fff', fontSize: 20}}>Re-take</Text>
            </TouchableOpacity>
            <TouchableOpacity onPress={onAuth} style={{width: 130,height: 40,alignItems: 'center',borderRadius: 4}}>
              <Text style={{ color: '#fff',fontSize: 20}}>Go Back</Text>
            </TouchableOpacity>
            <TouchableOpacity onPress={authenticatePhoto} style={{width: 130,height: 40,alignItems: 'center',borderRadius: 4}}>
              <Text style={{ color: '#fff',fontSize: 20}}>Authenticate</Text>
            </TouchableOpacity>
          </View>
        </View>
      </ImageBackground>
    </View>
  )
}

export interface TakePhotoProps {
    data:string;
    onValidationSuccess: () => void;
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center'
  },
  imgBackground: {
    flex: 1,flexDirection: 'column',padding: 15,justifyContent: 'flex-end'
  }
})